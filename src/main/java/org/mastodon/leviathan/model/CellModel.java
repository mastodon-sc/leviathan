package org.mastodon.leviathan.model;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.locks.ReentrantReadWriteLock;

import org.mastodon.feature.FeatureModel;
import org.mastodon.graph.io.RawGraphIO.FileIdToGraphMap;
import org.mastodon.graph.io.RawGraphIO.GraphToFileIdMap;
import org.mastodon.labels.LabelSets;
import org.mastodon.mamut.project.MamutProject;
import org.mastodon.model.AbstractModel;
import org.mastodon.model.tag.DefaultTagSetModel;
import org.mastodon.model.tag.RawTagSetModelIO;
import org.mastodon.model.tag.TagSetModel;
import org.mastodon.properties.Property;
import org.mastodon.spatial.SpatioTemporalIndex;
import org.mastodon.spatial.SpatioTemporalIndexImp;
import org.mastodon.spatial.SpatioTemporalIndexImpRebuilderThread;
import org.mastodon.undo.GraphUndoRecorder;
import org.mastodon.undo.Recorder;
import org.mastodon.undo.UndoPointMarker;

public class CellModel extends AbstractModel< CellGraph, Cell, Link > implements UndoPointMarker
{

	private final SpatioTemporalIndex< Cell > index;

	private final ReentrantReadWriteLock lock;

	private final GraphUndoRecorder< Cell, Link > undoRecorder;

	private final FeatureModel featureModel;

	private final DefaultTagSetModel< Cell, Link > tagSetModel;

	private final String spaceUnits;

	private final String timeUnits;

	public CellModel( final String spaceUnits, final String timeUnits )
	{
		super( new CellGraph() );
		this.spaceUnits = spaceUnits;
		this.timeUnits = timeUnits;
		final SpatioTemporalIndexImp< Cell, Link > theIndex = new SpatioTemporalIndexImp<>( modelGraph, modelGraph.idmap().vertexIdBimap() );
		/*
		 * Every 1 second, rebuild spatial indices with more than 100
		 * modifications
		 */
		new SpatioTemporalIndexImpRebuilderThread( "Rebuild spatial indices", theIndex, 100, 1000, true ).start();
		index = theIndex;
		lock = modelGraph.getLock();

		final int initialCapacity = 1024;

		final List< Property< Cell > > vertexUndoableProperties = new ArrayList<>();
		vertexUndoableProperties.add( modelGraph.getVertexPool().positionProperty() );

		final List< Property< Link > > edgeUndoableProperties = new ArrayList<>();

		featureModel = new FeatureModel();
		tagSetModel = new DefaultTagSetModel<>( getGraph() );
		vertexUndoableProperties.add(
				new DefaultTagSetModel.SerialisationAccess< Cell, Link >( tagSetModel )
				{
					@Override
							protected LabelSets< Cell, Integer > getVertexIdLabelSets()
					{
						return super.getVertexIdLabelSets();
					}
				}.getVertexIdLabelSets() );
		edgeUndoableProperties.add(
				new DefaultTagSetModel.SerialisationAccess< Cell, Link >( tagSetModel )
				{
					@Override
							protected LabelSets< Link, Integer > getEdgeIdLabelSets()
					{
						return super.getEdgeIdLabelSets();
					}
				}.getEdgeIdLabelSets() );

		undoRecorder = new GraphUndoRecorder<>(
				initialCapacity,
				modelGraph,
				modelGraph.idmap(),
				CellModelSerializer.getInstance().getVertexSerializer(),
				CellModelSerializer
						.getInstance()
						.getEdgeSerializer(),
				vertexUndoableProperties,
				edgeUndoableProperties );

		final Recorder< DefaultTagSetModel.SetTagSetStructureUndoableEdit > recorder = undoRecorder.createGenericUndoableEditRecorder();
		tagSetModel.setUndoRecorder( recorder );
	}

	/**
	 * Clears this model and loads the model from the specified project folder.
	 *
	 * @param reader
	 *            reader from which to load the raw project files.
	 * @return the {@Link FileIdToGraphMap} object generated by loading the
	 *         model graph.
	 * @throws IOException
	 *             if an I/O error occurs while reading the file.
	 */
	public FileIdToGraphMap< Cell, Link > loadRaw( final MamutProject.ProjectReader reader ) throws IOException
	{
		final FileIdToGraphMap< Cell, Link > idmap = modelGraph.loadRaw( reader.getRawModelInputStream(), CellModelSerializer.getInstance() );

		tagSetModel.pauseListeners();
		tagSetModel.clear();
		try (
				final InputStream tis = reader.getRawTagsInputStream();
				final ObjectInputStream ois = new ObjectInputStream( new BufferedInputStream( tis, 1024 * 1024 ) ))
		{
			RawTagSetModelIO.read( tagSetModel, idmap, ois );
		}
		catch ( final FileNotFoundException e )
		{}
		tagSetModel.resumeListeners();

		return idmap;
	}

	/**
	 * Saves this model to the specified the specified project folder.
	 *
	 * @param writer
	 *            writer to save the raw project files.
	 * @return the {@Link GraphToFileIdMap} object generated by saving the model
	 *         graph.
	 * @throws IOException
	 *             if an I/O error occurs while writing the file.
	 */
	public GraphToFileIdMap< Cell, Link > saveRaw( final MamutProject.ProjectWriter writer ) throws IOException
	{
		final GraphToFileIdMap< Cell, Link > idmap = modelGraph.saveRaw( writer.getRawModelOutputStream(), CellModelSerializer.getInstance() );

		try (
				final OutputStream fos = writer.getRawTagsOutputStream();
				final ObjectOutputStream oos = new ObjectOutputStream( new BufferedOutputStream( fos, 1024 * 1024 ) ))
		{
			RawTagSetModelIO.write( tagSetModel, idmap, oos );
		}

		return idmap;
	}

	/**
	 * Exposes the spatio-temporal index of this model.
	 *
	 * @return the spatio-temporal index.
	 */
	public SpatioTemporalIndex< Cell > getSpatioTemporalIndex()
	{
		return index;
	}

	public void undo()
	{
		lock.writeLock().lock();
		try
		{
			undoRecorder.undo();
			modelGraph.notifyGraphChanged();
		}
		finally
		{
			lock.writeLock().unlock();
		}
	}

	public void redo()
	{
		lock.writeLock().lock();
		try
		{
			undoRecorder.redo();
			modelGraph.notifyGraphChanged();
		}
		finally
		{
			lock.writeLock().unlock();
		}
	}

	@Override
	public void setUndoPoint()
	{
		undoRecorder.setUndoPoint();
	}

	public FeatureModel getFeatureModel()
	{
		return featureModel;
	}

	public TagSetModel< Cell, Link > getTagSetModel()
	{
		return tagSetModel;
	}

	public String getSpaceUnits()
	{
		return spaceUnits;
	}

	public String getTimeUnits()
	{
		return timeUnits;
	}
}
